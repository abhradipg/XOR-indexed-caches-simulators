#include "SetAssociativeCacheState.hpp"

SetAssociativeCacheState::SetAssociativeCacheState(
    const CacheSettings &cacheSettings,
    const GlobalIteratorState &globalIteratorState)
    : CacheState(cacheSettings.cacheLevel), nLines(cacheSettings.nCacheLines),
      nSets(cacheSettings.nCacheSets),
      cacheSetStates(
          this->CreateCacheSetStates(cacheSettings, globalIteratorState)) {
  assert(GlobalVars::lineSize == cacheSettings.lineSize);
  assert(GlobalVars::nCacheSetsByCacheLevel[this->cacheLevel] ==
         cacheSettings.nCacheSets);
  ComputeXORSetIndex(); // build the map
}

CacheAccessResult
SetAssociativeCacheState::ProcessAccess(const CacheAccess &access,
                                        SimulationResult &simulationResult) {
  auto setIndex = this->ComputeSetIndex(access);
  assert(this->cacheSetStates[setIndex] != nullptr);
  this->lastAccessedSetIndex = setIndex;
  return this->cacheSetStates[setIndex]->ProcessAccess(access,
                                                       simulationResult);
}

size_t SetAssociativeCacheState::GetNumberOfLines() const {
  return this->nLines;
}

size_t SetAssociativeCacheState::GetNumberOfNonEmptyLines() const {
  size_t n = 0;
  for (const auto &cacheSetState : this->cacheSetStates)
    n += cacheSetState->GetNumberOfNonEmptyLines();
  return n;
}

void SetAssociativeCacheState::AddLinesToCacheStateSnapshot(
    std::vector<CacheStateSnapshot> &cssByCacheLevel) const {
  assert(this->cacheLevel < cssByCacheLevel.size());
  cssByCacheLevel[this->cacheLevel].SetLastAccessedSetIndex(
      this->lastAccessedSetIndex);

  for (size_t i = this->lastAccessedSetIndex; i < this->nSets; i++)
    this->cacheSetStates[i]->AddLinesToCacheStateSnapshot(cssByCacheLevel);

  for (size_t i = 0; i < this->lastAccessedSetIndex; i++)
    this->cacheSetStates[i]->AddLinesToCacheStateSnapshot(cssByCacheLevel);
}

void SetAssociativeCacheState::Warp(const WarpInfo &warpInfo) {
  this->WarpCacheSets(warpInfo);
  this->RotateCacheSets(warpInfo.GetNRightCacheSetRotations(this->cacheLevel));
}

void SetAssociativeCacheState::WarpCacheSets(const WarpInfo &warpInfo) {
  for (const auto &cacheSetState : this->cacheSetStates)
    cacheSetState->Warp(warpInfo);
}

void SetAssociativeCacheState::RotateCacheSets(size_t nRightRotations) {
  assert(this->nSets > 1);
  const auto nRight = nRightRotations % this->nSets;
  const auto nLeft = (this->nSets - nRight) % this->nSets;
  nRight < nLeft ? this->RotateCacheSetsRight(nRight)
                 : this->RotateCacheSetsLeft(nLeft);
}

void SetAssociativeCacheState::RotateCacheSetsRight(size_t nRotations) {
  std::rotate(this->cacheSetStates.rbegin(),
              this->cacheSetStates.rbegin() + nRotations,
              this->cacheSetStates.rend());
}

void SetAssociativeCacheState::RotateCacheSetsLeft(size_t nRotations) {
  std::rotate(this->cacheSetStates.begin(),
              this->cacheSetStates.begin() + nRotations,
              this->cacheSetStates.end());
}


void SetAssociativeCacheState::ComputeXORSetIndex() {
    assert(this->nSets > 0);
    size_t nSets = this->nSets;
    this->setMapping.reserve(nSets * nSets);
    size_t numset = (size_t)nSets;
    size_t m = 0;   //m is number of bits in setindex
    size_t k = 0;

    do {
      m += 1;
      numset /= 2;
    } while(numset != 1);


    std::vector<size_t> generator(sizeof(size_t)* m);
    k = m/2;

    //initialize all columns of generator matrix to 0
    for(size_t i = 0;i < m;i++){
      generator[i] = (size_t)0;
    }

    if(m%2 != 0){
      for(size_t i = 0;i < m;i++){
	for(size_t j = 0;j < m;j++){
	  size_t currentbit = 0;
	  if((i+j) < m){
	    //set the current bit
	    currentbit = currentbit | ((size_t)1 << (m-1-i));
	    generator[j] |= currentbit;
	  }
	}
      }
    }
    else{
      for(size_t i = 0;i < m;i++){
	for(size_t j = 0;j < m;j++){
	  size_t currentbit = 0;
	  if(j == (m - i - 1)){
	    currentbit = currentbit | ((size_t)1 << (m-1-i));
	    generator[j] |= currentbit;
	  }
	  else if(i >= k && j >= k && i >= j){
	    currentbit = currentbit | ((size_t)1 << (m-1-i));
	    generator[j] |= currentbit;
	  }
	}
      }
    }
    
    for(size_t i=0;i < nSets;i++){
      //j is lower bits
      for(size_t j=0;j < nSets;j++){
	//computing for [i,j]
	size_t currentaddr = (i<<m)+j;
	size_t index = 0;
	size_t temp;
	size_t k_bit = 0;
	//generate the kth bit
	for(size_t k = 0; k<m ;k++){
	  temp = i & generator[k];
	  k_bit = 0;
	  while(temp != 0){
	    if(temp % 2 != 0){
	      k_bit++;
	      k_bit = k_bit%2;
	    }
	    temp /= 2;
	  }
                index |= (k_bit<<(m-k-1));
	}
	index ^= j;
	this->setMapping[i*nSets+j] = index;
      }
    }
}

int
SetAssociativeCacheState::clog2(size_t x) const {
  int i;
  size_t y = x;
  for (i = -1;  y != 0;  i++)
    y >>= 1;
  return i;
}

size_t
SetAssociativeCacheState::ComputeSetIndex(const CacheAccess &access) const {
    cout << "Computing set index\n");
    assert(this->nSets > 0);
    size_t nsets = this->nSets;
    size_t lowerBits = access.GetMemoryBlockId() % nsets;
    size_t nBits = clog2(nsets);
    nBits = nBits < 0 ? 0: nBits;
    size_t higherBits = (access.GetMemoryBlockId() >> nBits) % nsets;
    return this->setMapping[higherBits * nSets + lowerBits]; //mapping is computed in the constructor
}

std::vector<std::unique_ptr<FullyAssociativeCacheState>>
SetAssociativeCacheState::CreateCacheSetStates(
    const CacheSettings &cacheSettings,
    const GlobalIteratorState &globalIteratorState) const {
  std::vector<std::unique_ptr<FullyAssociativeCacheState>> res;
  res.reserve(cacheSettings.nCacheSets);
  const auto &cacheSetSettings = this->CreateCacheSetSettings(cacheSettings);
  assert(cacheSetSettings.IsFullyAssociative());
  for (size_t i = 0; i < cacheSettings.nCacheSets; i++)
    res.push_back(CacheStateFactory::CreateFullyAssociativeCacheState(
        cacheSetSettings, globalIteratorState));
  return res;
}

CacheSettings SetAssociativeCacheState::CreateCacheSetSettings(
    const CacheSettings &cacheSettings) const {
  CacheSettings cacheSetSettings = cacheSettings;
  cacheSetSettings.nCacheSets = 1;
  cacheSetSettings.nCacheLines = cacheSetSettings.associativity;
  cacheSetSettings.cacheSize =
      cacheSetSettings.associativity * cacheSetSettings.lineSize;
  assert(cacheSetSettings.IsValid());
  return cacheSetSettings;
}
